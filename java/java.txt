java
java EE (java 企业版)
java ME (嵌入式开发)
JVM:java虚拟机
JDK:java开发工具包
JRE:java运行环境

1.1 java程序的构成
对象 object:对象是类的一个实例
类 class:类是一个模版
方法 method:方法就是行为，一个类可以有很多方法
实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定

1.2.1变量
数据类型 默认值    存储格式	数据范围
short    0         2个字节	-32,768到32767
int      0         4个字节	-2,147,483,648到2,147,483,647
byte     0         1个字节	-128到127
char     空        2个字节	Unicode的字符范围：’\u0000’（即为0）到’\uffff’（即为65,535）
long     0L或0l    8个字节	-9,223,372,036,854,775,808到9,223,372,036, 854,775,807
float    0.0F或0.0f	4个字节	32位IEEEE 754单精度范围
double   0.0或0.0D(d) 8个字节	64位IEEE 754双精度范围
boolean  false     1位        true(1)或false(0)

1.2.2常量
常量的定义需使用final关键字
常量名要求必须大写
final 数据类型 变量名称 = 值;

1.3.1位运算符
位运算符 名称 描述
&         按位与
|         按位或
^         按位异或  如果相对应位值相同，则结果为0，否则为1
~         按位补    反转操作数每一位
<<        按位左移  最低位补0
>>        按位右移  最高位补0
>>>       按位右移补零

1.3.2条件运算符
或三目运算符
布尔表达式?表达式1:表达式2
布尔表达式为true,返回表达式1,否则返回表达式2

1.4包
类名可能碰到重复的情况，为了更好的组织类，java提供了包机制，用于区别类名的命名空间。
包的作用：
①把功能相似或相关的类或接口组织在一个包中，方便类的查找和使用。
②包采用了树形目录的存储方式。
③包限定了访问权限，拥有包访问权限的类才能访问某个包中的类。
使用package 关键字定义一个包。
使用import关键字导入一个包中的类。
包的命名规范是全小写拼音字母。
1.5访问修饰符
访问修饰符 本类 同包 子类 其他
private    √
默认       √    √
protected  √    √    √
public     √    √    √    √

1.6内部类
可以将一个类的定义放在另一个类的定义内部，这就是内部类。
包含内部类的类被称为外部类。
内部类的主要作用：
①内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类
②内部类的方法可以直接访问外部类的所有数据，包括私有数据
③内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更加方便。
④内部类允许继承多个非接口类型。
内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两个类。

1.6.1成员内部类
public class People {
    private String name = "LiLei";         //外部类的私有属性
    //内部类Student
    public class Student {
        String ID = "20151234";               //内部类的成员属性
        //内部类的方法
        public void stuInfo(){
            System.out.println("访问外部类中的name：" + name);
            System.out.println("访问内部类中的ID：" + ID);
        }
    }

    //测试成员内部类
    public static void main(String[] args) {
        People a = new People();     //创建外部类对象，对象名为a
        Student b = a.new Student(); //使用外部类对象创建内部类对象，对象名为b
        // 或者为 People.Student b = a.new Student();
        b.stuInfo();   //调用内部对象的suInfo方法
    }
}
内部类的使用方法：
①内部类相当于外部类的一个成员变量，所以内部类可以使用任意访问修饰符。
②定义成员内部类后，必须使用外部类对象来创建内部类对象，例如
内部类 对象名称 = 外部类对象.new 内部类();
③如果内部类和外部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，如果要访问外部类的成员变量，可以使用this关键字。
成员内部类不能含有static的变量和方法，因为成员内部类需要先创建了外部类，才能创建它自己的。

1.6.2静态内部类
静态内部类是static修饰的内部类
public class People {
    private String name = "LiLei";         //外部类的私有属性

	/*外部类的静态变量。
	Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。*/
    static String ID = "510xxx199X0724XXXX"; 

    //静态内部类Student
    public static class Student {
        String ID = "20151234";               //内部类的成员属性
        //内部类的方法
        public void stuInfo(){
            System.out.println("访问外部类中的name：" + (new People().name));
            System.out.println("访问外部类中的ID：" + People.ID);
            System.out.println("访问内部类中的ID：" + ID);
        }
    }

    //测试成员内部类
    public static void main(String[] args) {
        Student b = new Student();   //直接创建内部类对象，对象名为b
        b.stuInfo();                 //调用内部对象的suInfo方法
    }
}
这种内部类的特点是：
①静态内部类不能直接访问外部类的非静态成员，但可以通过 new 外部类().成员 的方式访问
②如果外部类的静态成员与内部类的成员名称相同，可通过类名.静态成员访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可通过成员名直接调用外部类的静态成员
③创建静态内部类的对象时，不需要外部类的对象，可以直接创建 内部类 对象名= new 内部类();

1.6.3局部内部类
局部内部类，是指内部类定义在方法和作用域内。
//外部类People
public class People {    
    //定义在外部类中的方法内：
    public void peopleInfo() {
        final String sex = "man";  //外部类方法中的常量
        class Student {
            String ID = "20151234"; //内部类中的常量
            public void print() {
                System.out.println("访问外部类的方法中的常量sex：" + sex);
                System.out.println("访问内部类中的变量ID:" + ID);
            }
        }
        Student a = new Student();  //创建方法内部类的对象
        a.print();//调用内部类的方法
    }
    //定义在外部类中的作用域内
    public void peopleInfo2(boolean b) {
        if(b){
            final String sex = "man";  //外部类方法中的常量
            class Student {
                String ID = "20151234"; //内部类中的常量
                public void print() {
                    System.out.println("访问外部类的方法中的常量sex：" + sex);
                    System.out.println("访问内部类中的变量ID:" + ID);
                }
            }
            Student a = new Student();  //创建方法内部类的对象
            a.print();//调用内部类的方法
        }
    }
    //测试方法内部类
    public static void main(String[] args) {
        People b = new People(); //创建外部类的对象
        System.out.println("定义在方法内：===========");
        b.peopleInfo();  //调用外部类的方法
        System.out.println("定义在作用域内：===========");
        b.peopleInfo2(true);
    }
}
局部内部类也像别的类一样进行编译，但只是作用域不同而已，只在该方法或条件的作用域内才能使用，退出这些作用域后无法引用的

1.6.4匿名内部类
匿名内部类，就是没有名字的内部类。正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写。但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口。
例如：
public class Outer { 

    public Inner getInner(final String name, String city) { 
        return new Inner() { 
            private String nameStr = name; 
            public String getName() { 
                return nameStr; 
            } 
        }; 
    } 

    public static void main(String[] args) { 
        Outer outer = new Outer(); 
        Inner inner = outer.getInner("Inner", "NewYork"); 
        System.out.println(inner.getName()); 
    } 
} 
interface Inner { 
    String getName(); 
}
匿名内部类是不能加访问修饰符的。要注意的是，new 匿名类，这个类是要先定义的,如果不先定义，编译时会报错该类找不到。

同时，在上面的例子中，当所在的方法的形参需要在内部类里面使用时，该形参必须为final。这里可以看到形参 name 已经定义为final了，而形参city 没有被使用则不用定义为final。

然而，因为匿名内部类没名字，是用默认的构造函数的，无参数的，如果需要该类有带参数的构造函数，示例如下：

   public Inner getInner(final String name, String city) { 
        return new Inner(name, city) { 
            private String nameStr = name; 

            public String getName() { 
                return nameStr; 
            } 
        }; 
    }
注意这里的形参city，由于它没有被匿名内部类直接使用，而是被抽象类Inner的构造函数所使用，所以不必定义为final

1.7继承
继承可以看成是类与类之间的衍生关系
所以继承需要符合的关系是：is-a，父类更通用，子类更具体
语法：
class 子类 extends 父类
继承的特点：
①子类拥有父类除private以外的所有属性和方法
②子类可以拥有自己的属性和方法
③子类可以重写实现父类的方法
④Java 中的继承是单继承，一个类只有一个父类
(java实现多继承的一个办法是implements-实现接口)

1.7.1方法的重写
子类可以继承父类的方法，也可以对父类的方法进行重写。子类在调用方法中，优先调用子类的方法。重写的方法一定要与原父类的方法语法保持一致，比如返回值类型，参数类型及个数，和方法名都必须一致。

1.7.2继承的初始化顺序
继承的初始化顺序是先初始化父类再初始化子类
系统先创建父类对象，再创建子类对象，先初始化了属性，再调用了构造函数。

final关键字可以修饰类、方法、属性和变量
final 修饰类，则该类不允许被继承，为最终类
final 修饰方法，则该方法不允许被覆盖（重写）
final 修饰属性：则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）
final 修饰变量，则该变量的值只能赋一次值，即变为常量

super关键字在子类内部使用，代表父类对象。
访问父类的属性 super.属性名
访问父类的方法 super.method()
子类构造方法需要调用父类的构造方法时，在子类的构造方法体里最前面的位置：super()

1.8多态
多态是指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。多态也称作动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。

通俗地讲，只通过父类就能够引用不同的子类，这就是多态，我们只有在运行的时候才会知道引用变量所指向的具体实例对象。

1.8.1向上转型
子类继承于父类，所以子类可以自动向上转型为父类，使用父类定义的引用可以指向子类的对象。
但不能用一个子类的引用指向父类的对象。
如果定义了一个指向子类对象的父类引用类型，那么它除了能够引用父类中定义的所有属性和方法外，还可以使用子类强大的功能。但对于只存在于子类中的方法和属性就不能获取。
因此，向上转型，在运行时，会遗忘子类对象中与父类对象中不同的方法，也会覆盖与父类中相同的方法-重写。

1.8.2多态的实现条件
三个必要条件：继承、重写和向上转型（父类引用指向子类对象）
只有满足以上三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。

1.8.3多态的实现方式
Java中多态的实现方式：继承父类方法重写，抽象类和抽象方法，接口实现。

1.8.3.1抽象类和抽象方法
仅声明而没有方法体。
abstract void f();
包含抽象方法的类叫做抽象类，定义类时需要加abstract关键字。
抽象类是限制规定子类必须实现某种方法，但不关注实现细节。
抽象类的对象不能直接创建，但可以定义引用变量指向子类对象。

1.8.4接口实现
interface定义一个完全抽象类，不提供任何方法体。
语法格式：
修饰符 interface 接口名称 [extends 其他的类名] {
	//声明变量
	//抽象方法
}
接口不能用于实例化对象，其中的方法是抽象方法，接口成员是static final类型，支持多继承。
多继承实现方式：

修饰符 interface A extends 接口1，接口2{

}

修饰符 class A implements 接口1，接口2{

}


